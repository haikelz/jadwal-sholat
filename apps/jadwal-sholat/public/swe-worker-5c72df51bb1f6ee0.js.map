{"version":3,"file":"../public/swe-worker-5c72df51bb1f6ee0.js","mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA","sources":["webpack://_N_E/../../node_modules/.pnpm/@ducanh2912+next-pwa@10.2.9_next@15.1.7_@babel+core@7.26.9_@opentelemetry+api@1.9.0_react-dom_6wao2jud7xnimdqtj4q6vgqeha/node_modules/@ducanh2912/next-pwa/dist/sw-entry-worker.js"],"sourcesContent":["self.onmessage = async (e)=>{\n    switch(e.data.type){\n        case \"__START_URL_CACHE__\":\n            {\n                let t = e.data.url, a = await fetch(t);\n                if (!a.redirected) return (await caches.open(\"start-url\")).put(t, a);\n                return Promise.resolve();\n            }\n        case \"__FRONTEND_NAV_CACHE__\":\n            {\n                let t = e.data.url, a = await caches.open(\"pages\");\n                if (await a.match(t, {\n                    ignoreSearch: !0\n                })) return;\n                let s = await fetch(t);\n                if (!s.ok) return;\n                if (a.put(t, s.clone()), e.data.shouldCacheAggressively && s.headers.get(\"Content-Type\")?.includes(\"text/html\")) try {\n                    let e = await s.text(), t = [], a = await caches.open(\"static-style-assets\"), r = await caches.open(\"next-static-js-assets\"), c = await caches.open(\"static-js-assets\");\n                    for (let [s, r] of e.matchAll(/<link.*?href=['\"](.*?)['\"].*?>/g))/rel=['\"]stylesheet['\"]/.test(s) && t.push(a.match(r).then((e)=>e ? Promise.resolve() : a.add(r)));\n                    for (let [, a] of e.matchAll(/<script.*?src=['\"](.*?)['\"].*?>/g)){\n                        let e = /\\/_next\\/static.+\\.js$/i.test(a) ? r : c;\n                        t.push(e.match(a).then((t)=>t ? Promise.resolve() : e.add(a)));\n                    }\n                    return await Promise.all(t);\n                } catch  {}\n                return Promise.resolve();\n            }\n        default:\n            return Promise.resolve();\n    }\n};"],"names":[],"sourceRoot":""}